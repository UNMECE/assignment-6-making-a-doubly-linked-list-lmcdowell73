#include <iostream>


void add_coordinate(Coordinate *list_end, float x, float y){
Coordinate *new_coord = (Coordinate *)malloc(sizeof(Coordinate);
new_coord->x = x;
new_coord->y = y;
new_coord->coord_id = coord_id;
new_coord->next = NULL;
new_coord->previous = list_end;
list_end->next = new_coord;
}

void forward_display(Coordinate *list_beginning)
  {
Coordinate *temp = *list_beginning;
cout << "Display forwards: ";
while(temp != nullptr)	{
	cout << temp->x << " ";
	cout << temp->y << " ";
	temp = temp->next
	}	
cout << endl;
}

void backward_display(Coordinate *list_end)
{
Coordinate *temp = list_end;
if (temp == nullptr){
	cout << "list is empty." << endl;
	return;
	}

while(temp->next != nullptr) {
	temp = temp->next;
	}	

cout << "Reverse list: ";
while(temp != nullptr) {
		cout << temp->x << " ";
		cout << temp->y << " ";
		temp = temp->previous
}
cout << endl;

}
void delete_coordinate(Coordinate *list_beginning, int coord_id_to_delete)
{
Coordinate *temp = list_beginning;

while(temp != NULL){
	if(temp->coord_id == coord_id_to_delete)
	{
		if(temp->previous != NULL)
		{
			temp->previous->next = temp->next;
		}else{
		list_beginning = temp->next;
		}
		if(temp->next != NULL){
		temp->next->previous = temp->previous;
	}
		delete temp;
		return;
	}
    }	
}
int list_length(Coordinate *list_beginning)
{

}
void closest_to(Coordinate *list_beginning, float x, float y)
{

}



int main(int argc, char *argv[])
{






}
